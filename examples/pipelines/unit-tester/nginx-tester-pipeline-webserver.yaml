apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: nginx-vm-tester
spec:
  params:
    - name: vmName
      default: fedora-nginx-vm-tester
      type: string
    - name: privateKeySecretName
      default: nginx-vm-tester-client-private-key
      type: string
    - name: publicKeySecretName
      default: nginx-vm-tester-client-public-key
      type: string
  tasks:
    - name: generate-ssh-keys
      params:
        - name: publicKeySecretName
          value: $(params.publicKeySecretName)
        - name: privateKeySecretName
          value: $(params.privateKeySecretName)
        - name: privateKeyConnectionOptions
          value:
            - 'user:fedora'
            - 'disable-strict-host-key-checking:true'
      taskRef:
        kind: Task
        name: generate-ssh-keys
    - name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              name: "$(params.vmName)"
            spec:
              running: false
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: "$(params.vmName)"
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(params.publicKeySecretName)
                        propagationMethod:
                          configDrive: {}
                  hostname: "$(params.vmName)"
                  domain:
                    cpu:
                      cores: 1
                      sockets: 1
                      threads: 1
                    devices:
                      disks:
                        - name: containerdisk
                          disk:
                            bus: virtio
                        - disk:
                            bus: virtio
                          name: cloudinitdisk
                      interfaces:
                        - bridge: {}
                          name: default
                          model: virtio
                      networkInterfaceMultiqueue: true
                      rng: {}
                    resources:
                      requests:
                        memory: 1Gi
                  networks:
                    - name: default
                      pod: {}
                  terminationGracePeriodSeconds: 0
                  volumes:
                    - name: containerdisk
                      containerDisk:
                        image: 'kubevirt/fedora-cloud-container-disk-demo:latest'
                    - name: cloudinitdisk
                      cloudInitConfigDrive:
                        userData: |
                          #cloud-config
      runAfter:
        - generate-ssh-keys
      taskRef:
        kind: Task
        name: create-vm-from-manifest
    - name: execute-in-vm
      params:
        - name: vmName
          value: "$(params.vmName)"
        - name: secretName
          value: "$(params.privateKeySecretName)"
        - name: script
          value: |
            #!/usr/bin/env bash
            set -ex

            sudo yum -y install nginx
            # Enable and start Nginx service
            echo "Enabling and starting Nginx service..."
            sudo systemctl enable nginx
            sudo systemctl start nginx
            # Edit the default Nginx HTML page
            default_html_path="/usr/share/nginx/html/index.html"
            echo "Editing the default Nginx HTML page..."
            sudo bash -c "echo 'ammarun here' > ${default_html_path}"
            # Reload Nginx to pick up changes
            echo "Reloading Nginx to pick up changes..."
            sudo systemctl reload nginx
      runAfter:
        - create-vm-from-manifest
      taskRef:
        kind: Task
        name: execute-in-vm
---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  generateName: nginx-vm-tester-run-
  labels:
    tekton.dev/pipeline: nginx-vm-tester
spec:
  pipelineRef:
    name: nginx-vm-tester
  taskRunSpecs:
    - ServiceAccountName: generate-ssh-keys-task
      pipelineTaskName: generate-ssh-keys
    - ServiceAccountName: create-vm-from-manifest-task
      pipelineTaskName: create-vm-from-manifest
    - ServiceAccountName: execute-in-vm-task
      pipelineTaskName: execute-in-vm