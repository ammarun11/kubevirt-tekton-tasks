---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: server-deployer-ubuntu
spec:
  tasks:
    - name: modify-data-object
      params:
        - name: manifest
          value: |
            apiVersion: cdi.kubevirt.io/v1beta1
            kind: DataVolume
            metadata:
              generateName: flasker-ubuntu-server-
            spec:
              pvc:
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 5Gi
                volumeMode: Filesystem #will use storageClass (Default)
              source:
                http:
                  url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
        - name: waitForSuccess
          value: 'true'
      taskRef:
        kind: Task
        name: modify-data-object
    - name: generate-ssh-keys
      params:
        - name: privateKeyConnectionOptions
          value:
            - 'user:ubuntu'
            - 'disable-strict-host-key-checking:true'
      taskRef:
        kind: Task
        name: generate-ssh-keys
    - name: create-vm-from-manifest
      params:
        - name: manifest
          value: |
            apiVersion: kubevirt.io/v1
            kind: VirtualMachine
            metadata:
              generateName: flasker-ubuntu-vm-
              annotation:
                description: ubuntu VM generated by server-deployer-ubuntu pipeline
              labels:
                app: flasker-ubuntu-vm
            spec:
              running: true
              template:
                metadata:
                  labels:
                    kubevirt.io/domain: flasker-ubuntu-vm
                spec:
                  accessCredentials:
                    - sshPublicKey:
                        source:
                          secret:
                            secretName: $(tasks.generate-ssh-keys.results.publicKeySecretName)
                        propagationMethod:
                          configDrive: {}
                  domain:
                    cpu:
                      cores: 2
                      sockets: 1
                      threads: 1
                    devices:
                      disks:
                      - name: rootdisk
                        disk:
                          bus: virtio
                      - disk:
                          bus: virtio
                        name: cloudinitdisk
                      interfaces:
                        - bridge: {}
                          name: default
                      networkInterfaceMultiqueue: true
                      rng: {}
                    resources:
                      requests:
                        memory: 2Gi
                  hostname: flasker-ubuntu-vm
                  networks:
                    - name: default
                      pod: {}
                  volumes:
                  - dataVolume: 
                      name: $(tasks.modify-data-object.results.name)
                    name: rootdisk
                  - cloudInitConfigDrive:
                      userData: |
                        #cloud-config
                        password: ubuntu
                        chpasswd: { expire: False }
                        runcmd:
                          - useradd -m -s /bin/bash developer
                          - echo "developer:tauhid" | chpasswd
                          - echo "root:root" | chpasswd
                          - echo "ubuntu ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
                    name: cloudinitdisk
      runAfter:
        - generate-ssh-keys
      taskRef:
        kind: Task
        name: create-vm-from-manifest
    - name: execute-in-vm
      params:
        - name: vmName
          value: $(tasks.create-vm-from-manifest.results.name)
        - name: secretName
          value: $(tasks.generate-ssh-keys.results.privateKeySecretName)
        - name: script
          value: |
            sudo apt update -y 
            sudo apt install -y git python3-venv pip
            sudo pip install flask
            git clone https://github.com/pallets/flask.git
            echo deploying flaskr...
            pushd flask/examples/tutorial
            export FLASK_APP=flaskr
            flask init-db
            nohup flask run --host=0.0.0.0 > /tmp/server.out 2>&1 &
            echo deployed
      runAfter:
        - create-vm-from-manifest
      taskRef:
        kind: Task
        name: execute-in-vm